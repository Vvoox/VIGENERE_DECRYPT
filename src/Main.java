import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;import java.util.Scanner;public class Main {    public static void main(String[] args) {        System.out.print("For encryption enter 1 , else 2 : ");        Scanner ss2 = new Scanner(System.in);        int choose = ss2.nextInt();        if(choose==1) {            System.out.print("Insert your text here : ");            Scanner ss = new Scanner(System.in);            Scanner ss1 = new Scanner(System.in);            String text = ss.nextLine();            System.out.print("Your key text : ");            String key = ss1.nextLine();            crypt(text,key);        }        else {            System.out.print("Insert your text here : ");            Scanner ss = new Scanner(System.in);            Scanner ss1 = new Scanner(System.in);            Scanner ss3 = new Scanner(System.in);            String text = ss.nextLine();            System.out.println("If you have the key , insert 1 , else 2 : ");            int test = ss3.nextInt();            if(test==1){            System.out.print("Your key text : ");            String key = ss1.nextLine();            decrypt(text,key);            }            else {                    sequence(text);                }        }    }    public static void crypt(String text , String key){        String[] CODE = new String[26];        int[] CODE1 = new int[26];        StringBuilder cipher = new StringBuilder();        CODE = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};        CODE1 = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};        String[] tab_text = new String[text.length()];        int[] tab1_text = new int[text.length()];        String[] tab_key = new String[text.length()];        int[] tab1_key = new int[key.length()];        int[] tab_add = new int[text.length()];        tab_text=text.split("");        tab_key=key.split("");        for(int i = 0 ; i<tab_text.length ; i++) {            for (int j = 0; j < CODE.length; j++) {                if (tab_text[i].equals(CODE[j])) {                    tab1_text[i] = CODE1[j];                }            }        }        for(int i = 0 ; i<tab_key.length ; i++){            for(int j =0 ; j < CODE.length; j++){                if(tab_key[i].equals(CODE[j])){                    tab1_key[i]=CODE1[j];                }            }        }        int M=0 ;        int N=0 ;        for(int i = 0 ; i<tab1_text.length ; i++){            if(N>tab1_key.length-1){                N=0;            }            if(M>=tab1_text.length){                break;            }            tab_add[i]=tab1_text[M]+tab1_key[N];            if(tab_add[i]>25){                tab_add[i]=tab_add[i]-26;            }            M++;N++;        }        /*for(int i =0 ; i<tab_add.length  ; i++){            System.out.print(tab_add[i]);        }*/        for(int i = 0 ; i<tab_add.length ; i++){            for(int j =0 ; j < CODE.length; j++){                if(tab_add[i]==CODE1[j]){                    cipher.append(CODE[j]);                }            }        }        System.out.print(cipher);    }    public static void decrypt(String text , String key){        String[] CODE = new String[26];        int[] CODE1 = new int[26];        StringBuilder cipher = new StringBuilder();        CODE = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};        CODE1 = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};        String[] tab_text = new String[text.length()];        int[] tab1_text = new int[text.length()];        String[] tab_key = new String[text.length()];        int[] tab1_key = new int[key.length()];        int[] tab_add = new int[text.length()];        tab_text=text.split("");        tab_key=key.split("");        for(int i = 0 ; i<tab_text.length ; i++){            for(int j =0 ; j < CODE.length; j++){                if(tab_text[i].equals(CODE[j])){                    tab1_text[i]=CODE1[j];                }            }        }        for(int i = 0 ; i<tab_key.length ; i++){            for(int j =0 ; j < CODE.length; j++){                if(tab_key[i].equals(CODE[j])){                    tab1_key[i]=CODE1[j];                }            }        }        int M=0 ;        int N=0 ;        for(int i = 0 ; i<tab1_text.length ; i++){            if(N>tab1_key.length-1){                N=0;            }            if(M>=tab1_text.length){                break;            }            tab_add[i]=tab1_text[M]-tab1_key[N];            if(tab_add[i]<0){                tab_add[i]=tab_add[i]+26;            }            M++;N++;        }        /*for(int i =0 ; i<tab_add.length  ; i++){            System.out.print(tab_add[i]);        }*/        for(int i = 0 ; i<tab_add.length ; i++){            for(int j =0 ; j < CODE.length; j++){                if(tab_add[i]==CODE1[j]){                    cipher.append(CODE[j]);                }            }        }        System.out.print(cipher);    }    public static void sequence(String text){        String[] tab_cipher = new String[text.length()];        tab_cipher=text.split("");        StringBuilder seq = new StringBuilder();        StringBuilder position = new StringBuilder();        String[] seq1 = new String[text.length()];        StringBuilder numbers = new StringBuilder();        for(int i =0 ; i+2<tab_cipher.length ; i++){            for(int j=i+2  ; j+2<tab_cipher.length ; j++){               /* if(i+1>tab_cipher.length || i+2>tab_cipher.length || j+2>tab_cipher.length ||  j+1>tab_cipher.length  ){                    break;                }*/                if(tab_cipher[i].equals(tab_cipher[j]) && tab_cipher[i+1].equals(tab_cipher[j+1]) && tab_cipher[i+2].equals(tab_cipher[j+2]) ){                    //System.out.println(tab_cipher[j]+tab_cipher[j+1]+tab_cipher[j+2]);                    seq.append(tab_cipher[i]+tab_cipher[i+1]+tab_cipher[i+2]+" "+(j-i)+"\n");                    numbers.append((j-i)+",");                    //seq.append(j-i+"\n");                }            }        }        System.out.print(seq);        multiple(numbers);        //System.out.print(position);    }    public static void  multiple (StringBuilder num){        System.out.println(num);        String num1 = num.toString();        System.out.println(num1);        String[] tab;        tab=num1.split(",");        for(int i =0 ; i<tab.length ; i++){            System.out.println(tab[i]);        }        String[][] res = new String[tab.length][];        for(int i=0 ; i<tab.length ; i++){            for(int j=2; j<20 ; j++){                if(Integer.valueOf(tab[i])%j==0){                    //res[i][j] = j+" *";                    System.out.println(j+"is multiple for "+i);                }                else{                    //res[i][j] = j+" a";                    System.out.println(j+"is not multiple for "+i);                }            }        }        /*for(int i=0 ; i<tab.length ; i++){            for(int j =2 ; j< 20 ; j++){                System.out.println(res[i][j]+" ");            }            System.out.println();        }*/    }}//Khalil